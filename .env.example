# Recipe Generator Application - Environment Configuration Template
# Copy this to .env.local for frontend and backend/.env for backend

# =============================================================================
# BACKEND CONFIGURATION (backend/.env)
# =============================================================================

# Database
DATABASE_URL="postgresql://username:password@localhost:5432/recipe_generator"

# Authentication
JWT_SECRET="your-super-secure-jwt-secret-key-change-in-production"
JWT_REFRESH_SECRET="your-super-secure-refresh-secret-key-change-in-production"
JWT_EXPIRES_IN="1h"
JWT_REFRESH_EXPIRES_IN="7d"
BCRYPT_ROUNDS="12"

# Redis Cache
REDIS_ENABLED="true"
REDIS_HOST="localhost"
REDIS_PORT="6379"
REDIS_PASSWORD=""

# Server
PORT="3001"
NODE_ENV="development"

# CORS
FRONTEND_URL="http://localhost:3000"

# Rate Limiting
RATE_LIMIT_TTL="60"
RATE_LIMIT_LIMIT="100"

# External Services
OPENAI_API_KEY="your-openai-api-key"
STRIPE_SECRET_KEY="sk_test_..."
STRIPE_WEBHOOK_SECRET="whsec_..."

# File Upload
UPLOAD_MAX_SIZE="10485760"
UPLOAD_ALLOWED_TYPES="image/jpeg,image/png,image/webp"

# =============================================================================
# FRONTEND CONFIGURATION (.env.local)
# =============================================================================

# API Configuration
VITE_API_URL="http://localhost:3001/api"

# App Configuration
VITE_APP_NAME="Recipe Generator"
VITE_APP_VERSION="1.0.0"

# Features
VITE_ENABLE_ANALYTICS="true"
VITE_ENABLE_PWA="true"

# External Services
VITE_STRIPE_PUBLISHABLE_KEY="pk_test_..."
VITE_GOOGLE_ANALYTICS_ID="GA-XXXXX-X"

# =============================================================================
# PRODUCTION CONFIGURATION
# =============================================================================

# For production deployment, ensure these are properly configured:

# Security
# - Use strong, unique secrets for JWT
# - Enable HTTPS
# - Set secure CORS origins
# - Use environment-specific database URLs

# Performance
# - Enable Redis for production
# - Configure proper cache TTL values
# - Set up CDN for static assets

# Monitoring
# - Configure error tracking (Sentry, etc.)
# - Set up application monitoring
# - Enable structured logging

# =============================================================================
# DOCKER CONFIGURATION
# =============================================================================

# For Docker deployments:
# REDIS_HOST="redis"
# DATABASE_URL="postgresql://user:pass@postgres:5432/dbname"

# =============================================================================
# KUBERNETES CONFIGURATION  
# =============================================================================

# For Kubernetes deployments, use ConfigMaps and Secrets:
# - Store non-sensitive config in ConfigMaps
# - Store secrets in Kubernetes Secrets
# - Use environment-specific namespaces
