import React, { useState, useEffect } from 'react';
import { apiClientWithFallback } from '../lib/api-client-with-fallback';
import { useEnhancedSubscriptionPlans, useEnhancedUserSubscription } from '../hooks/useEnhancedSubscription';
import { BackendStatusIndicator } from '../components/ui/BackendStatusIndicator';
import { WebSocketTest } from '../components/WebSocketTest';
import { Button } from '../components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Badge } from '../components/ui/badge';
import { RefreshCw, CheckCircle, AlertTriangle, Info } from 'lucide-react';

export default function FallbackDemoPage() {
  const [backendStatus, setBackendStatus] = useState<{
    isOnline: boolean;
    lastCheck: Date;
  }>({ isOnline: true, lastCheck: new Date() });
  
  const [apiTestResults, setApiTestResults] = useState<{
    [key: string]: {
      success: boolean;
      data?: any;
      error?: string;
      usingMock: boolean;
    };
  }>({});

  const { data: plans, isLoading: plansLoading } = useEnhancedSubscriptionPlans();
  const { data: userSubscription, isLoading: userLoading } = useEnhancedUserSubscription();

  useEffect(() => {
    checkBackendStatus();
  }, []);

  const checkBackendStatus = async () => {
    try {
      const isOnline = await apiClientWithFallback.isBackendOnline();
      const status = apiClientWithFallback.getBackendStatus();
      setBackendStatus(status);
    } catch (error) {
      setBackendStatus({
        isOnline: false,
        lastCheck: new Date(),
      });
    }
  };

  const testApiEndpoint = async (endpoint: string, method: () => Promise<any>) => {
    try {
      console.log(`üîÑ Testing ${endpoint}...`);
      const result = await method();
      
      const usingMock = result?.message?.includes('(mock)') || false;
      
      setApiTestResults(prev => ({
        ...prev,
        [endpoint]: {
          success: true,
          data: result,
          usingMock,
        },
      }));
      
      console.log(`‚úÖ ${endpoint} success:`, result);
    } catch (error: any) {
      console.error(`‚ùå ${endpoint} error:`, error);
      
      setApiTestResults(prev => ({
        ...prev,
        [endpoint]: {
          success: false,
          error: error?.message || 'Unknown error',
          usingMock: false,
        },
      }));
    }
  };

  const testAllEndpoints = async () => {
    setApiTestResults({});
    
    const tests = [
      {
        name: 'Subscription Plans',
        method: () => apiClientWithFallback.getSubscriptionPlans(),
      },
      {
        name: 'User Subscription',
        method: () => apiClientWithFallback.getUserSubscription(),
      },
      {
        name: 'User Profile',
        method: () => apiClientWithFallback.getProfile(),
      },
      {
        name: 'Dashboard Overview',
        method: () => apiClientWithFallback.getAdminDashboardOverview(),
      },
      {
        name: 'System Health',
        method: () => apiClientWithFallback.getSystemHealth(),
      },
    ];

    for (const test of tests) {
      await testApiEndpoint(test.name, test.method);
      // Add small delay between requests
      await new Promise(resolve => setTimeout(resolve, 500));
    }
  };

  const getStatusIcon = (result: any) => {
    if (result?.success) {
      return result.usingMock 
        ? <AlertTriangle className="w-5 h-5 text-orange-500" />
        : <CheckCircle className="w-5 h-5 text-green-500" />;
    }
    return <AlertTriangle className="w-5 h-5 text-red-500" />;
  };

  const getStatusBadge = (result: any) => {
    if (result?.success) {
      return result.usingMock 
        ? <Badge variant="secondary" className="bg-orange-100 text-orange-800">Mock Data</Badge>
        : <Badge variant="secondary" className="bg-green-100 text-green-800">Live API</Badge>;
    }
    return <Badge variant="destructive">Error</Badge>;
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8 px-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            üîÑ Fallback API System Demo
          </h1>
          <p className="text-lg text-gray-600 max-w-3xl mx-auto mb-6">
            H·ªá th·ªëng API v·ªõi kh·∫£ nƒÉng t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi sang d·ªØ li·ªáu mock khi backend kh√¥ng kh·∫£ d·ª•ng. 
            ƒê·∫£m b·∫£o frontend lu√¥n ho·∫°t ƒë·ªông m∆∞·ª£t m√† trong qu√° tr√¨nh ph√°t tri·ªÉn.
          </p>
          
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-4xl mx-auto">
            <div className="flex items-center gap-2 mb-2">
              <Info className="w-5 h-5 text-blue-600" />
              <span className="font-semibold text-blue-900">C√°ch ho·∫°t ƒë·ªông:</span>
            </div>
            <ul className="text-sm text-blue-800 text-left list-disc list-inside space-y-1">
              <li>Lu√¥n th·ª≠ g·ªçi API th·∫≠t tr∆∞·ªõc</li>
              <li>N·∫øu backend kh·∫£ d·ª•ng ‚Üí tr·∫£ d·ªØ li·ªáu th·∫≠t</li>
              <li>N·∫øu backend kh√¥ng kh·∫£ d·ª•ng ‚Üí t·ª± ƒë·ªông chuy·ªÉn sang d·ªØ li·ªáu mock</li>
              <li>React Query cache ƒë∆∞·ª£c t·ªëi ∆∞u cho c·∫£ hai tr∆∞·ªùng h·ª£p</li>
              <li>Ng∆∞·ªùi d√πng kh√¥ng bao gi·ªù th·∫•y trang tr·∫Øng ho·∫∑c l·ªói</li>
            </ul>
          </div>
        </div>

        {/* Backend Status */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BackendStatusIndicator />
                Backend Status
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Tr·∫°ng th√°i:</span>
                  <Badge variant={backendStatus.isOnline ? "default" : "secondary"}>
                    {backendStatus.isOnline ? "Online" : "Offline"}
                  </Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Ki·ªÉm tra l·∫ßn cu·ªëi:</span>
                  <span className="text-sm font-mono">
                    {backendStatus.lastCheck.toLocaleTimeString()}
                  </span>
                </div>
                <Button 
                  onClick={checkBackendStatus} 
                  size="sm" 
                  variant="outline"
                  className="w-full mt-3"
                >
                  <RefreshCw className="w-4 h-4 mr-2" />
                  Refresh Status
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>React Query Data</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div>
                  <div className="text-sm text-gray-600 mb-1">Subscription Plans:</div>
                  <div className="text-lg font-semibold">
                    {plansLoading ? '‚è≥ Loading...' : `${plans?.length || 0} plans`}
                  </div>
                </div>
                <div>
                  <div className="text-sm text-gray-600 mb-1">User Subscription:</div>
                  <div className="text-lg font-semibold">
                    {userLoading ? '‚è≥ Loading...' : userSubscription ? '‚úÖ Active' : '‚ùå None'}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Test Controls</CardTitle>
            </CardHeader>
            <CardContent>
              <Button 
                onClick={testAllEndpoints} 
                size="sm" 
                className="w-full"
                disabled={Object.keys(apiTestResults).length > 0 && Object.values(apiTestResults).some(r => !r.success && !r.error)}
              >
                <RefreshCw className="w-4 h-4 mr-2" />
                Test All Endpoints
              </Button>
              <div className="mt-3 text-sm text-gray-600 text-center">
                Ki·ªÉm tra t·∫•t c·∫£ API endpoints ƒë·ªÉ xem fallback ho·∫°t ƒë·ªông
              </div>
            </CardContent>
          </Card>
        </div>

        {/* API Test Results */}
        {Object.keys(apiTestResults).length > 0 && (
          <Card className="mb-8">
            <CardHeader>
              <CardTitle>üß™ API Test Results</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {Object.entries(apiTestResults).map(([endpoint, result]) => (
                  <div key={endpoint} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        {getStatusIcon(result)}
                        <span className="font-semibold">{endpoint}</span>
                      </div>
                      {getStatusBadge(result)}
                    </div>
                    
                    {result.success ? (
                      <div className="bg-gray-50 rounded p-3">
                        <div className="text-sm text-gray-600 mb-1">Response:</div>
                        <pre className="text-xs text-gray-800 overflow-x-auto">
                          {JSON.stringify(result.data, null, 2)}
                        </pre>
                      </div>
                    ) : (
                      <div className="bg-red-50 rounded p-3">
                        <div className="text-sm text-red-600 mb-1">Error:</div>
                        <div className="text-sm text-red-800">{result.error}</div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Current Data Preview */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>üìã Current Subscription Plans</CardTitle>
            </CardHeader>
            <CardContent>
              {plansLoading ? (
                <div className="text-center py-4">
                  <RefreshCw className="w-6 h-6 animate-spin mx-auto mb-2" />
                  <div>Loading plans...</div>
                </div>
              ) : (
                <div className="space-y-3">
                  {plans?.map(plan => (
                    <div key={plan.id} className="border rounded p-3">
                      <div className="font-semibold">{plan.name}</div>
                      <div className="text-sm text-gray-600">{plan.price}</div>
                      <div className="text-xs text-gray-500 mt-1">
                        {plan.features.maxRecipeGenerations} recipes/month
                      </div>
                    </div>
                  )) || <div className="text-gray-500 text-center py-4">No plans available</div>}
                </div>
              )}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>üë§ Current User Subscription</CardTitle>
            </CardHeader>
            <CardContent>
              {userLoading ? (
                <div className="text-center py-4">
                  <RefreshCw className="w-6 h-6 animate-spin mx-auto mb-2" />
                  <div>Loading subscription...</div>
                </div>
              ) : userSubscription ? (
                <div className="space-y-2">
                  <div><strong>Plan:</strong> {userSubscription.plan.name}</div>
                  <div><strong>Status:</strong> {userSubscription.status}</div>
                  <div><strong>Billing:</strong> {userSubscription.billingCycle}</div>
                  <div><strong>Recipes Left:</strong> {userSubscription.usageQuota.recipeGenerationsLeft}</div>
                </div>
              ) : (
                <div className="text-gray-500 text-center py-4">
                  No active subscription
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* WebSocket Test Section */}
        <Card className="mt-8">
          <CardHeader>
            <CardTitle>üîå WebSocket Real-time Features</CardTitle>
          </CardHeader>
          <CardContent>
            <WebSocketTest />
          </CardContent>
        </Card>

        {/* Implementation Notes */}
        <Card className="mt-8">
          <CardHeader>
            <CardTitle>üí° Implementation Details</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 text-sm">
              <div>
                <h4 className="font-semibold mb-2">‚úÖ Fallback API Benefits:</h4>
                <ul className="space-y-1 text-gray-600">
                  <li>‚Ä¢ Frontend lu√¥n ho·∫°t ƒë·ªông, k·ªÉ c·∫£ khi backend ch·∫øt</li>
                  <li>‚Ä¢ Kh√¥ng c·∫ßn thay ƒë·ªïi code component</li>
                  <li>‚Ä¢ React Query cache t·ªëi ∆∞u cho c·∫£ hai tr∆∞·ªùng h·ª£p</li>
                  <li>‚Ä¢ T·ª± ƒë·ªông detect v√† switch gi·ªØa real/mock data</li>
                  <li>‚Ä¢ Development experience m∆∞·ª£t m√†</li>
                  <li>‚Ä¢ Easy testing v·ªõi d·ªØ li·ªáu mock nh·∫•t qu√°n</li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold mb-2">‚öôÔ∏è Technical Features:</h4>
                <ul className="space-y-1 text-gray-600">
                  <li>‚Ä¢ Automatic health checking m·ªói 30s</li>
                  <li>‚Ä¢ Intelligent retry logic</li>
                  <li>‚Ä¢ Network error detection</li>
                  <li>‚Ä¢ Mock data v·ªõi realistic structure</li>
                  <li>‚Ä¢ Toast notifications cho user feedback</li>
                  <li>‚Ä¢ Backend status indicator</li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold mb-2">üîå Port Architecture:</h4>
                <ul className="space-y-1 text-gray-600">
                  <li>‚Ä¢ <strong>Port 3000:</strong> Frontend (Vite dev server)</li>
                  <li>‚Ä¢ <strong>Port 3001:</strong> Backend API (REST endpoints)</li>
                  <li>‚Ä¢ <strong>Port 3003:</strong> WebSocket Server (real-time)</li>
                  <li>‚Ä¢ T√°ch bi·ªát c√°c service ƒë·ªÉ tr√°nh conflict</li>
                  <li>‚Ä¢ WebSocket optional - app v·∫´n ch·∫°y khi t·∫Øt</li>
                  <li>‚Ä¢ Independent scaling v√† deployment</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
