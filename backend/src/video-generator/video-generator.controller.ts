import { 
  Controller, 
  Post, 
  Get, 
  Body, 
  Param, 
  Query,
  UseGuards, 
  Request,
  HttpCode,
  HttpStatus 
} from '@nestjs/common';
import { 
  ApiTags, 
  ApiOperation, 
  ApiResponse, 
  ApiBearerAuth,
  ApiParam,
  ApiQuery
} from '@nestjs/swagger';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { VideoGeneratorService } from './video-generator.service';
import { 
  GenerateRecipeVideoDto,
  GeneratedVideoResponseDto,
  VideoStatusResponseDto,
  VideoListResponseDto,
  VideoGenerationStatsDto
} from './dto/video-generator.dto';

@ApiTags('Video Generator')
@Controller('videos')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth()
export class VideoGeneratorController {
  constructor(
    private readonly videoGeneratorService: VideoGeneratorService
  ) {}

  @Post('generate')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'Generate video for recipe',
    description: 'Create a video tutorial for a recipe with specified style and options. The generation process is asynchronous and returns immediately with a video ID for status tracking.'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Video generation initiated successfully',
    type: GeneratedVideoResponseDto
  })
  @ApiResponse({ 
    status: 400, 
    description: 'Bad request - Invalid recipe ID or parameters' 
  })
  @ApiResponse({ 
    status: 401, 
    description: 'Unauthorized - Invalid or missing authentication token' 
  })
  @ApiResponse({ 
    status: 404, 
    description: 'Recipe not found' 
  })
  @ApiResponse({ 
    status: 500, 
    description: 'Internal server error - Video generation failed' 
  })
  async generateVideo(
    @Request() req: any,
    @Body() generateVideoDto: GenerateRecipeVideoDto
  ): Promise<{
    success: boolean;
    message: string;
    data: GeneratedVideoResponseDto;
  }> {
    const userId = req.user.id;
    
    const result = await this.videoGeneratorService.generateVideo(
      userId, 
      generateVideoDto
    );

    return {
      success: true,
      message: 'Video generation initiated successfully',
      data: result
    };
  }

  @Get(':videoId')
  @ApiOperation({ 
    summary: 'Get video status and details',
    description: 'Retrieve the current status and details of a video generation request'
  })
  @ApiParam({ 
    name: 'videoId', 
    description: 'Video ID to check status for',
    example: 'uuid-video-456'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Video status retrieved successfully',
    type: VideoStatusResponseDto
  })
  @ApiResponse({ 
    status: 401, 
    description: 'Unauthorized - Invalid or missing authentication token' 
  })
  @ApiResponse({ 
    status: 404, 
    description: 'Video not found' 
  })
  async getVideoStatus(
    @Param('videoId') videoId: string
  ): Promise<{
    success: boolean;
    message: string;
    data: VideoStatusResponseDto;
  }> {
    const videoStatus = await this.videoGeneratorService.getVideoStatus(videoId);

    return {
      success: true,
      message: 'Video status retrieved successfully',
      data: videoStatus
    };
  }

  @Get('recipe/:recipeId')
  @ApiOperation({ 
    summary: 'Get videos for a recipe',
    description: 'Retrieve all videos generated for a specific recipe'
  })
  @ApiParam({ 
    name: 'recipeId', 
    description: 'Recipe ID to get videos for',
    example: 'uuid-recipe-123'
  })
  @ApiQuery({
    name: 'userOnly',
    required: false,
    description: 'Filter to videos generated by the authenticated user only',
    type: Boolean
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Recipe videos retrieved successfully',
    type: [VideoListResponseDto]
  })
  @ApiResponse({ 
    status: 401, 
    description: 'Unauthorized - Invalid or missing authentication token' 
  })
  @ApiResponse({ 
    status: 404, 
    description: 'Recipe not found' 
  })
  async getRecipeVideos(
    @Request() req: any,
    @Param('recipeId') recipeId: string,
    @Query('userOnly') userOnly?: boolean
  ): Promise<{
    success: boolean;
    message: string;
    data: VideoListResponseDto[];
  }> {
    const userId = userOnly ? req.user.id : undefined;
    
    const videos = await this.videoGeneratorService.getRecipeVideos(
      recipeId, 
      userId
    );

    return {
      success: true,
      message: 'Recipe videos retrieved successfully',
      data: videos
    };
  }

  @Get('stats/user')
  @ApiOperation({ 
    summary: 'Get user video generation statistics',
    description: 'Retrieve statistics about the authenticated user\'s video generation history'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Video generation statistics retrieved successfully',
    type: VideoGenerationStatsDto
  })
  @ApiResponse({ 
    status: 401, 
    description: 'Unauthorized - Invalid or missing authentication token' 
  })
  async getGenerationStats(
    @Request() req: any
  ): Promise<{
    success: boolean;
    message: string;
    data: VideoGenerationStatsDto;
  }> {
    const userId = req.user.id;
    
    const stats = await this.videoGeneratorService.getGenerationStats(userId);

    return {
      success: true,
      message: 'Video generation statistics retrieved successfully',
      data: stats
    };
  }

  // Future endpoints can be added here:
  
  /*
  @Delete(':videoId')
  @ApiOperation({ 
    summary: 'Delete generated video',
    description: 'Delete a video and its associated data'
  })
  async deleteVideo(
    @Request() req: any,
    @Param('videoId') videoId: string
  ) {
    // Implementation for video deletion
  }

  @Post(':videoId/share')
  @ApiOperation({ 
    summary: 'Share video',
    description: 'Generate a shareable link for the video'
  })
  async shareVideo(
    @Request() req: any,
    @Param('videoId') videoId: string,
    @Body() shareOptions: any
  ) {
    // Implementation for video sharing
  }

  @Post(':videoId/regenerate')
  @ApiOperation({ 
    summary: 'Regenerate video with new options',
    description: 'Regenerate an existing video with different parameters'
  })
  async regenerateVideo(
    @Request() req: any,
    @Param('videoId') videoId: string,
    @Body() newOptions: GenerateRecipeVideoDto
  ) {
    // Implementation for video regeneration
  }

  @Get('admin/stats')
  @ApiOperation({ 
    summary: 'Get admin video statistics',
    description: 'Retrieve system-wide video generation statistics (admin only)'
  })
  async getAdminStats(
    @Request() req: any
  ) {
    // Implementation for admin statistics
  }
  */
}
